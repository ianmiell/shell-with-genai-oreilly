= Presentation: The Core Commands
== CORE COMMANDS
Here we go over core commands needed for everyday use.  This is a baseline, before we get onto more.  Some may already be well known to you, but some of the flags/tips may not.

== CORE COMMANDS - FILES AND FOLDERS
=== Directories
Go to home folder:

 cd

First, let's look at directory changes. To find out where you are, you run:

 pwd

To move to another folder, you run:

 cd /tmp

If the folder starts with a forward slash, that means it's relative to the root, not the folder you are in. You say 'slash tmp' if you want to tell someone else it leads with a slash.
If you want to return to the last folder you were in, you can do:

 cd -

=== mkdir
To make a folder you can do:

 mkdir icl-core
 cd icl-core
 cd -
 cd -

If you try to make more than one subfolder, you can use the -p flag

 mkdir path/to/a/new/folder
 mkdir -p path/to/a/new/folder
 cd path

=== touch
To create a file you can use touch:

 touch afile
 touch .adotfile

=== ls
The file doesn't need a dot in it. To see that it's there, you use ls:

 ls

If you want to see more details about the file:

 ls -l

If you want to see dotfiles too, you can run:

 ls -a

Often you want to see files in time modified order, most recent last, so I almost always run:

 ls -lrt

-l for long, -r for reversed, and -t for time order, or

 ls -lrta

for dotfiles.  To recurse down files:

 ls -R
 ls -lR

=== rm
To remove files, use rm:

 rm afile
 ls

Doesn't work on folders:

 rm to

=== rmdir
Use rmdir. Folder must be empty:

 rmdir to
 rmdir to/a/new/folder
 ls -lR

You can recurse down the folders with:

 rm -r to/a
 ls -lR

=== create files with cat
Adding text to a file:

 cat > afile << EOF
 some text in a file
 some more text
 EOF
 cat afile
 tac afile

=== cp
Copying a file:

 cp afile afile.copied
 cat afile
 cat afile.copied

=== basename and dirname
Needed for a later exercise.
Gives you the filename from an absolute path:

 basename /usr/bin/base64

The dirname:

 dirname /usr/bin/base64

=== echo
Outputting text to screen:

 echo some text
 echo -n no newline; echo -n no newline
 echo -n no newline && echo -n no newline

== Less and man
mn indispensible file viewer is less:

 less /usr/share/doc/bash/copyright

Hit 'space' to move forward a page, 'b' to go back.
/ to search forward '/asdasd' '/face'
? to search back
n to go to next match
G to go to the end
CTRL-G for status

Another indispensible tool as you are learning the command line is man:

 man ls
 man man

Mention concept of 'sections':

 man 1 intro
 man 2 intro [etc]

Note the parts (1,2) etc. See `man man` about the different sections.

 man
 man -K browser

When looking at man pages, be patient. Go through every line carefully and note what you don't know.
Then research those things. If you don't have time, go back to it later when you do. Make time.
This is vital for progressing with Linux knowledge.
The info is dense but it's almost all significant, and the same concepts will come up over and over again.
https://man7.org/linux/man-pages/

== bash man page
Look over it.

== sudo
Sudo is a command that lets you run a command as the administrator.
You may or may not be permitted to do this on your system, but I might need to use it a couple of times during this course.
If I run sudo like this:

 sudo ls

then by default it will run the 'ls' command as though I were the root user.
Its purpose is to allow you to run commands as other users, but the default is 'root', so that's what it's mostly known for.

== find
Looks for files

 find .   # files under the current folder
 find week_one # files under a specific folder

More depth next week.


=== OPTIONAL
== chmod
an important command if you want to manage who can do what to which files

 mkdir tmp
 cd tmp
 touch afile
 ls afile
 ls -l afile
 chmod -r afile    # no-one can read
 chmod +r afile    # everyone can read
 chmod o-r afile   # user and group can read
 chmod g+r afile   # group can read

== info

 info chmod

'n' command, 'p' command, 'u', 'Enter'
Keep hitting 'p' until can go no further, then up


== EXERCISE: https://learning.oreilly.com/scenarios/bash-fundamentals-challenge/9781098138431/

== Solutions (from katacoda git repo):

## Task 1 Solution

cat > name.sh << EOF
#!/bin/bash
echo Ian
EOF
chmod +x name.sh

## Task 2 Solution

cat > name2.sh << END
#!/bin/bash
mkdir name
cd name
cat > name.sh << EOF
#!/bin/bash
echo Ian
EOF
chmod +x name.sh
./name.sh
cd -
rm -rf name
END
chmod +x name2.sh
