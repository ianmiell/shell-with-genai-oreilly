In bash, you don't have to wait for the command to complete to start the next one. You can use job control to run processes in the background and manage them. In this section youâ€™ll learn about:
- What job control is
- How to run multiple processes at once in your shell
- How to manage those jobs

== Starting Jobs
Start with a simple job in the background. Type this in:

 date
 sleep 30 &
 sleep 31 &

A 'normal' command (`sleep 30`) and then added in another character, the ampersand (`&`). The ampersand will run the command 'in the background', which becomes a 'job' in this bash session. The job has two identifiers, which are immediately reported to you in the terminal.

 [1] 39165

The first is the 'job number', which in this case is '`1`', and the second is the process id, in this case `39165`, but which will be different for you.
If, before the time is up, you run any other commands:

 pwd

then they are not interfered with by this running job. You can just carry on as normal. If you wait for the program to finish (30 seconds in this case), and then run any other command, then bash will report to you what happened to that job:

 pwd
 [1]+  Done                    sleep 30

Again, it reports the job number, this time with the status ('`Done`'), and the command that was originally run ('`sleep 40`').

=== Waiting
One technique that can be useful in bash scripts is to start a number of background processes, and then wait for them to finish before continuing. This can be done with the `wait` builtin. If your original sleep is still running, then you can run wait.

 sleep 5 &
 wait
 [1]+  Done                    sleep 10

You can wait for multiple jobs, it will wait until both finished:

 sleep 10 &
 sleep 11 &
 wait

There is a gotcha here. What is the exit code if the any of them fails?

 sleep 15 &
 sleep 16 && willfail &
 wait

It's true, because the wait command itself completed successfully:

 echo $?

If you want the exit code, use wait -n.

Compare:

 sleep 5 && willfail &
 wait
 echo $?

to:

 sleep 5 && willfail &
 wait -n

But it only waits for the first one to complete, eg

 sleep 15 &
 sleep 16 && willfail &
 wait -n

returns true.

=== Kill
If you want to kill off a job you use the % reference along with the first number reported. `jobs` shows the jobs in progress

 sleep 999 &
 sleep 998 &
 jobs
lekill %2
 jobs
 kill %1

kill is a useful command we will cover in a bit.
