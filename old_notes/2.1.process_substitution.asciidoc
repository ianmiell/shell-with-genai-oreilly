Process substitution is a really handy way of saving time at the command line.
In this section you will cover:
- The `<()` operator

Setup

 mkdir itb_process_subst && cd itb_process_subst
 mkdir a
 mkdir b
 touch a/1 a/2
 touch b/2 b/3
 ls a
 ls b

You've created two folders with slightly different contents.
Now let's say that you want to diff the output of `ls a` and `ls b` (a trivial but usefully simple example here). How would you do it?

 ls a
 ls b

You might do it like this:

 ls a > aout
 ls b > bout
 diff aout bout
 rm aout bout

That works, and there's nothing wrong with it, but typing all that out and cleaning up the files is a bit cumbersome. There's a much neater way that exposes a very useful technique.

 diff <(ls a) <(ls b)

That's neater, isn't it?
So what's going on?

=== The `<()` Operator

The `<()` operator is conceptually similar to the `$()` we saw briefly ealier and will see next.
the `<()` operator substitutes a _file containing the output_ of the process contained within it.
You might need to stop and think about this for a second.
That means that this line:

 diff <(ls a) <(ls b)

effectively becomes the command to diff two files, equivalent to the files `aout` and `bout` in the lines you typed in above.
So _wherever you would normally put a filename_, you can use the `<()` operator to save some time by dropping these in rather than creating files.
