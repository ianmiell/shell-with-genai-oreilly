== DISCUSSION

== SLIDE 33 - Further Bash Basics
== SLIDE 34 - DISCUSSION is bash a programming language?
What makes a programming language? Bash is a programming language, it's lasted so long because most people have to use a command line at some point, and it's become a standard
bash has some big weaknesses as a programming language, but so do others.
When do you switch from bash to another programming language?

== SLIDE 35 - Command Substitution
When writing bash scripts you often want to take the standard output of one command and ‘drop’ it into the script as though you had written that into it.
This can be achieved with command substitution. You will learn:

- What command substitution is
- The different ways of substituting commands

== WALKTHROUGH Command Substitution
Example:

 hostname
 echo "My hostname is: $(hostname)"
 echo 'My hostname is: $(hostname)'

If those lines are placed in a script, it will output the hostname of the host the script is running on. This can make your script much more dynamic. You can set variables based on the output of commands, add debug, and so on, just as with any other programming language.
You will have noticed that if wrapped in single quotes, the special meaning of the `$` sign is ignored again! This is the general pattern for dollar dereferences.

=== The Two Command Substitution Methods
There are two ways to do command substitution:

 echo "My hostname is: `hostname`"
 echo "My hostname is: $(hostname)"

These give the same output and the backticks perform the same function. So which should you use?

=== The 'Dollar-Bracket' Method: `$()`

Type this:

 cd itb_cmdsub
 touch a b
 ls a b

instead I could write

 ls $(echo a $(echo b))

What happened there?
This is an example of how subcommands can be _nested_. As you can see, the nesting is simple - just place a command wrapped inside a `$()` inside another command wrapped inside a `$()` and bash substitute in the output of each command from the inside out for you in the appropriate order.

Now let’s look at the equivalent code with backticks.

 cd ..

=== The 'Backtick' Method
 ls `echo a `echo b``

Nesting doesn't work - need to escape. It's reading left to right:

 ls `echo a \`echo b\``

$() form much easier

== EXERCISE
https://learning.oreilly.com/scenarios/bash-fundamentals-challenge/9781098138523/

== SOLUTION
cat > nfiles.sh << 'EOF'
#!/bin/bash
for ((i=1; i>0; i++))
do
  touch ${i}.txt
  if [[ $i == 50 ]]
  then
    break
  fi
done
EOF
chmod +x nfiles.sh
