= Presentation: Networking commands
The command line gives you the possibility to work with the network in lots of ways.

Here we're going to cover:
- web requests
- TCP connections
- ICMP connection
- DNS

== wget vs curl
If you want to retrieve a web page, then there are two competing commands - wget and curl
If we run both of them on the BBC site you can see the difference:

 wget https://bbc.co.uk/news

creates a file called 'news':

 less news

While curl outputs to the screen by default:

 curl https://bbc.co.uk/news

Hmmm but it doesn't. If I use verbose:

 curl -v https://bbc.co.uk/news

I can see that the page returned an HTTP 301, which is a redirect. So I have to tell curl to follow the redirect:

 curl -L https://bbc.co.uk/news

So we can see that wget is often easier to use, while curl is a more 'correct' tool.
Often, people start off using wget and then later switch to curl.
cURL stands for 'cat url'.

Wget great for automating collection of data from sites:

Talk through this:

 wget -e robots=off --mirror -k -np http://learnlispthehardway.org/book

Then html2text



#== telnet
#You can even go to a lower level than curl/wget with `telnet`
#This tool allows you to connect to the TCP port directly. This can be useful for low-level debugging:
#
# telnet bbc.co.uk 80
# GET /news HTTP/1.1
# Host: bbc.co.uk
#
#(This points us at a secure connection which is very difficult to do like this)
#
#== nc
#Another really useful networking tool. nc stands for netcat.
#You can set up a listening server on a port with:
#
# nc -l 1234
# nc 1234
#
# nc bbc.co.uk 80
# GET /news HTTP/1.1
# Host: bbc.co.uk

== ping
If you want to see if a server is up and running, then you can use ping, which operates at the same level as TCP but is much simpler.

 ping bbc.co.uk

Many public systems block these requests, so you don't always gets a response. But often useful on local networks

In scripts:

 ping -c1 bbc.co.uk

exit code 0.

Exit code 68:

 ping -c1 nowhere

== ip
For interfaces on your machine, ip is a very useful 'swiss army knife' type tool, like netcat.

 ip addr

A lot there, because I use docker, which creates a lot of interfaces. Oneline?

 ip -o addr

Still too many, I use grep to get rid of veth pairs:

 ip -o addr | grep -v veth

Can also check for routes:

 ip route

Other neighbouring machines in the ARP table:

 ip neigh

== dig
For DNS lookups, you can use dig

 dig bbc.co.uk                                 #Â Basic output. Note the SERVER line

 dig +trace bbc.co.uk                          #Â Trace how the info was got

 dig @8.8.8.8 bbc.co.uk                        # Use google's DNS server
 dig bbc.co.uk NS                              # Who is the nameserver for this address?
 dig +short bbc.co.uk                          # Just the IP - get used to this!
 dig +short +identify bbc.co.uk                # Just the IP, and tell me who told me

== nmap
nmap is a port scanner that is very useful for looking at networks

 nmap bbc.co.uk                                # tells you which standards ports are open on a host

Be careful using it in any more sophisticated way, as you can get identified as a pest if the operators of that system don't like what you're doing!
They may ban you, or even think you are a hacker.


= EXERCISE
https://learning.oreilly.com/scenarios/bash-fundamentals-challenge/9781098138721/

= SOLUTION
cat > trap.sh << EOF
#!/bin/bash
trap 'echo exiting' EXIT
trap 'echo int' INT
while true
do
  sleep 99
done
EOF
chmod +x trap.sh
