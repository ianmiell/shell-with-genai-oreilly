Since so much of working in bash is related to files and strings of text, the ability to manipulate strings is valuable.
While tools such as `sed`, `awk`, `perl` (and many many others) are well worth learning, in this section I want to show you what is possible in bash - and it may be more than you think!

In this section you'll cover:

-   How to edit strings in bash
-   What extglobs are and how you can use them
-   How to avoid common quoting problems

=== String Length
One of the most common requirements when working with strings is to determine length:

 A='12345678901234567890'
 echo "${#A}"
 echo "$#A"

Why did the second one not ‘work’?

=== String Editing
Another commonly-required string operation is getting a substring. This outputs everything from the third character in the string:

 echo ${A:2}

and this outputs two numbers from the fourth character in the string:

 echo ${A:3:2}

so you can tell from this that the strings are 0-indexed, that is the first character is numbered zero, the second is numbered one, and so on.
You can also search and replace within strings:

 B=0000200000
 echo ${B/0/1}

The simple pattern replaces only the first zero with a 1. If you want the pattern to go across all the matches in the string, then add another slash:

 echo ${B//0/1}

Note - next commands require bash version 4.x!

 C=AbCd
 echo ${C,}

whereas using two will lower-case the entire string:

 echo ${C,,}
 C=aAbCd

Similarly, the caret character will upper-case a string also:

 echo ${C^}
 echo ${C^^}

=== And More...

There are many more string manipulation tricks you can use, but it is not worth trying to learn them all in one go.
If you want to study them in more detail and find out what's available (or ever find yourself wondering what can be done in bash with strings) then have a look at the man page under 'Parameter Expansion'.

=== Quoting Hell
Quoting - as I’m sure you’ve seen - can get very complicated in bash very quickly.
Try this:

{line-numbers=on,starting-line-number=34}
    $ echo 'I really want to echo $HOME and I can't avoid it'

Uh-oh. You’re now stuck. Can you see why? Hit `CTRL-c` to get out of it. So you might think to try this:

{line-numbers=on,starting-line-number=35}
    $ echo "I really want to echo $HOME and I can't avoid it"

but this time the `$HOME` variable is evaluated and the output is not what is wanted. Try this:

 echo 'I really want to echo $HOME and I can'"'"'t avoid it'

That works. Remember this trick as it can save you a lot of time!
