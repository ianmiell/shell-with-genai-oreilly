== SLIDE 36 - Functions in Bash

From one angle, bash can be viewed as a programming language, albeit a quite slow and primitive one. One of the language features it has is the capability to create and call functions.  This leads us onto the topic of what a ‘command’ can be in bash:

- A function
- An alias
- A program
- A builtin

This section covers these items, and the relationships between them. By the end you will have a more nuanced understanding of commands in bash.
It's possible to get by without knowing much about functions in bash, but any serious bash user will know what they do and how they work.

== Basic Functions

 function myfunc {
         echo Hello World
 }

Declared a function

 myfunc

By declaring a function, and placing the block of code that needs to run inside curly braces, you can then call that function on the command line as though it were a program.

=== Arguments

You can have arguments, they are numbered and not declared

 function myfunc {
   echo $1
   echo $2
 }

$1 and $2. If we run

 myfunc "Hello World"

Hello world is on one line.

 myfunc Hello World

Hello world is on two lines. Remember that quotes group, and spaces separate in bash.
Can you explain the output? If not, you may want to read the previous pages!
Arguments to functions are numbered, from 1 to n. It’s up to the function to manage these arguments. There's no checking of arguments.

=== Variable Scope

Variables can have scope in bash.
This is particularly useful in functions, where you don’t want your variables to be accessible from outside the function.
The problem is shown here:

 function myfunc {
   echo $myvar
 }
 myfunc
 myvar="Hi from outside the function"
 myfunc

Bash functions have no special scope. Variables outside are visible to it. You can declare a variable as local to the function:

 function myfunc {
  local myvar="Hi from inside the function"
  echo $myvar
 }
 myfunc
 echo $myvar

The variable declared with `local` is only viewed and accessed within the function, and doesn’t interfere with the outside.
It can't be declared outside a function.

 local myvar="Will this work?"

The `local` above is an example of a bash 'builtin’. Now is a good time to talk about the different types of commands.

=== Functions, Builtins, Aliases and Programs

As mentioned, There are at least four ways to call commands in bash:
-   Builtins
-   Functions
-   Programs
-   Aliases
Let’s take each one in turn.

== Builtins

Builtins are commands that come ‘built in’ to the bash shell program.
Normally you can’t easily tell the difference between a builtin, a program or a function, but after this you will be able to.
eg

 builtin ls

Creates an error
The most familiar builtin is 'cd'.

 builtin cd /tmp
 builtin cd -

In case you don't know, cd - takes you back to the previous folder.
There's also a builtin called 'type' which tells you what kind of command something is.

 type cd
 type ls


=== Functions and Builtins

What happens if we write a function that clashes with a builtin?

 function cd() {
   echo 'No!'
 }
 cd /tmp
 builtin cd /tmp
 type cd
 cd -
 unset -f cd
 cd /tmp
 type cd
 cd -

You can also `unset -v` a variable. Or just leave the `-v` out, as it will assume you mean a variable by default. Now type this in:

 declare -f
 declare -F

If you want to know what functions are set in your environment, you run `declare -f`. This will output the functions and their bodies, so if you just want the names, use the `-F` flag.
There's also a `builtin` builtin calls the builtin program and throws an error if no such builtin exists.

 type builtin
 help builtin
 builtin grep
 builtin notaprogram

== Programs

Programs are executable files. Commonly-used examples of these are programs such as `grep`, `sed`, `vi`, and so on.
How do you tell whether a command is a builtin or a separate binary?
First, see whether it’s a builtin by running `builtin <command>` as you did before.
Then you can also run the `which` command to determine where the file is on your filesystem.

 which grep
 which cd
 which builtin
 which doesnotexist

Is `which` a builtin or a program?

 type which

== Aliases

Finally there are aliases. Aliases are strings that the shell takes and translates to whatever that string is aliased to.

 alias cd=doesnotexist
 alias
 cd
 unalias cd
 cd /tmp
 cd -
 alias
